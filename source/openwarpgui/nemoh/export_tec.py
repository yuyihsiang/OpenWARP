#!/usr/bin/env python
"""
This module export tec format to stl, vtk and vtp

Changes in version 1.1 (OpenWarp - Add Logging Functionality)
       Added support for logging.
"""
import settings
import utility
import os
import sys
import subprocess


__author__ = "yedtoss"
__copyright__ = "Copyright (C) 2014-2016 TopCoder Inc. All rights reserved."
__version__ = "1.1"


def tec_to_vtp(inp, output):
    """
    Convert tec to vtp format
    Args:
        inp: string, the path to the input file
        output:  string. the path to the output file
    Returns:
        Return the status of the conversion
    """
    return subprocess.call(["vmtk", "vmtksurfacereader", "-ifile", str(inp), "-f", "tecplot",  "-ofile", str(output)])


def vtp_to_other(inp, output, format='stl'):
    """
    Convert vtp  format to stl, vtk, tecplot, ply, pointdata
    Args:
        inp: string, the path to the input file
        output:  string. the path to the output file
    Returns:
        Return the status of the conversion
    """
    return subprocess.call(["vmtk", "vmtksurfacewriter", "-ifile", str(inp),
                            "-f", str(format),  "-ofile", str(output), "-mode", "ascii"])


def export_tec(files):
    """
    Args:
        files: array, a list of files to process. If empty or None the default files are processed
    This function export the tec files generated by the nemoh module to other format
    """

    tec_files = [settings.MESH_TEC_FILE, settings.FK_FORCE_TEC_FILE, settings.DIFFRACTION_FORCE_TEC_FILE,
             settings.EXCITATION_FORCE_TEC_FILE, settings.IRF_TEC_FILE, settings.RADIATION_COEFFICIENTS_TEC_FILE,
             settings.WAVE_FIELD_TEC_FILE]

    if files and len(files) > 0:
        tec_files = files

    extensions = ['stl', 'vtk', 'ply', 'pointdata']

    for tec_file in tec_files:

        vtp_out = os.path.splitext(tec_file)[0] + ".vtp"

        status = tec_to_vtp(tec_file, vtp_out)

        if status == 0:

            for ext in extensions:

                out = os.path.splitext(vtp_out)[0] + "." + ext
                vtp_to_other(vtp_out, out, ext)


if __name__ == '__main__':
    utility.setup_logging(default_conf_path=settings.LOGGING_CONFIGURATION_FILE, logging_path=settings.LOG_FILE)
    export_tec(sys.argv[1:])







